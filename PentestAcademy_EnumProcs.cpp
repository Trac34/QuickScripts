// ConsoleApplication1.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <Windows.h>
#include <stdio.h>
//#include <TlHelp32.h>
#include <WtsApi32.h>
#include <string>

std::wstring GetUserNameFromSid(PSID sid) {
	if (sid == nullptr)
		return L"";
	WCHAR name[32], domain[32];
	DWORD lname = _countof(name), ldomain = _countof(domain);
	SID_NAME_USE use;
	if (!LookupAccountSid(nullptr, sid, name, &lname, domain, &ldomain, &use))
		return L"";

	return std::wstring(domain) + L"\\" + name;
}
int Error(const char* msg)
{
	printf("%s (%u)", msg, GetLastError());
	return 1;
}

//int snapShot()
//{
//	HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
//	if (hSnapshot == INVALID_HANDLE_VALUE)
//		return Error("[-] Snapshot Failed.");
//	PROCESSENTRY32 pe;
//	pe.dwSize = sizeof(pe);
//	
//	Process32First(hSnapshot, &pe);
//	
//		do {
//			printf("PID: %6u  (PPID:  %6u)  Threads: %3u %ws\n",
//				pe.th32ProcessID, pe.th32ParentProcessID, pe.cntThreads, pe.szExeFile);
//		} while (Process32Next(hSnapshot, &pe));
//
//		CloseHandle(hSnapshot);
//		return 0;
//}

int main()
{
	DWORD level = 1;
	PWTS_PROCESS_INFO_EX info;
	DWORD count;
	if (!WTSEnumerateProcessesEx(WTS_CURRENT_SERVER_HANDLE, &level, WTS_ANY_SESSION, (LPWSTR*)&info, &count))
		return 1;
	for (DWORD i = 0; i < count; i++) {
		PWTS_PROCESS_INFO_EX p = info + i;
		printf("PID: %6u  Threads: %3u  SessionID: %u  %ws  (username: %ws)\n",
			p->ProcessId, p->NumberOfThreads, p->SessionId, p->pProcessName, 
			GetUserNameFromSid(p->pUserSid).c_str());
	}
	WTSFreeMemoryEx(WTSTypeProcessInfoLevel1, info, count);
	return 0;


}
